# ARM64 JIT CI/CD Pipeline for Sonic JSON Library
# This pipeline configures automated building, testing, and deployment for ARM64 JIT support

name: ARM64 JIT Build Pipeline

# Pipeline triggers
trigger:
  branches:
    include:
      - main
      - develop
      - release/*
      - feature/arm64-jit-*
  tags:
    include:
      - v*-arm64-jit

# Pull request triggers
pr:
  branches:
    include:
      - main
      - develop
      - feature/arm64-jit-*

# Pipeline variables
variables:
  - group: sonic-arm64-jit
  - name: GO_VERSION
    value: '1.22.5'
  - name: ENABLE_JIT
    value: 'true'
  - name: ENABLE_SIMD
    value: 'true'
  - name: ENABLE_TESTS
    value: 'true'
  - name: ENABLE_BENCH
    value: 'true'
  - name: PARALLELISM
    value: '4'
  - name: BUILD_TIMEOUT
    value: '60'
  - name: TEST_TIMEOUT
    value: '30'

# Resource definitions
resources:
  repositories:
    - repository: self
      type: git
      name: sonic

# Stages
stages:
  - stage: Setup
    displayName: 'Setup Environment'
    jobs:
      - job: Setup
        displayName: 'Setup Build Environment'
        timeoutInMinutes: 10
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            clean: true

          - task: GoTool@0
            displayName: 'Install Go'
            inputs:
              version: $(GO_VERSION)

          - script: |
              go version
              git --version
              docker --version
            displayName: 'Verify Tools'

          - script: |
              echo "##vso[task.prependpath]$(GOPATH)/bin"
            displayName: 'Add GOPATH to PATH'

  - stage: Build_ARM64_Linux
    displayName: 'Build ARM64 Linux'
    dependsOn: Setup
    condition: succeeded()
    jobs:
      - job: Build
        displayName: 'Build ARM64 Linux Binary'
        timeoutInMinutes: $(BUILD_TIMEOUT)
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          matrix:
            native:
              ARCH: 'arm64'
              CROSS_COMPILE: 'false'
            cross:
              ARCH: 'arm64'
              CROSS_COMPILE: 'true'
        steps:
          - checkout: self
            clean: true

          - task: GoTool@0
            displayName: 'Install Go'
            inputs:
              version: $(GO_VERSION)

          - script: |
              sudo apt-get update
              sudo apt-get install -y qemu-user-static binfmt-support gcc-aarch64-linux-gnu
            displayName: 'Install Cross-Compilation Tools'
            condition: eq(variables.CROSS_COMPILE, 'true')

          - script: |
              mkdir -p build/arm64-linux-$(ARCH)
            displayName: 'Create Build Directory'

          - script: |
              export GOOS=linux
              export GOARCH=$(ARCH)
              export GOMAXPROCS=$(PARALLELISM)
              export SONIC_JIT_ENABLED=$(ENABLE_JIT)
              export SONIC_ARM64_JIT=$(ENABLE_JIT)
              export SONIC_SIMD_ENABLED=$(ENABLE_SIMD)
              export SONIC_ARM64_NEON=$(ENABLE_SIMD)

              BUILD_TAGS="arm64,go1.20,!go1.26"
              if [ "$(ENABLE_JIT)" = "true" ]; then
                BUILD_TAGS="$BUILD_TAGS,arm64_jit,sonic_jit"
              fi
              if [ "$(ENABLE_SIMD)" = "true" ]; then
                BUILD_TAGS="$BUILD_TAGS,arm64_simd,arm64_neon"
              fi

              echo "Building with tags: $BUILD_TAGS"

              go build -v -tags "$BUILD_TAGS" -p $(PARALLELISM) -o build/arm64-linux-$(ARCH)/sonic ./...
            displayName: 'Build Sonic Library'

          - script: |
              ls -la build/arm64-linux-$(ARCH)/
              file build/arm64-linux-$(ARCH)/sonic 2>/dev/null || echo "No main binary found"
            displayName: 'Verify Build Artifacts'

          - publish: build/arm64-linux-$(ARCH)
            artifact: sonic-arm64-linux-$(ARCH)
            displayName: 'Publish Build Artifacts'

  - stage: Build_ARM64_Other
    displayName: 'Build ARM64 Other Platforms'
    dependsOn: Setup
    condition: succeeded()
    jobs:
      - job: Build_Darwin
        displayName: 'Build ARM64 macOS'
        timeoutInMinutes: $(BUILD_TIMEOUT)
        pool:
          vmImage: 'macOS-latest'
        steps:
          - checkout: self
            clean: true

          - task: GoTool@0
            displayName: 'Install Go'
            inputs:
              version: $(GO_VERSION)

          - script: |
              mkdir -p build/arm64-darwin
            displayName: 'Create Build Directory'

          - script: |
              export GOOS=darwin
              export GOARCH=arm64
              export GOMAXPROCS=$(PARALLELISM)
              export SONIC_JIT_ENABLED=$(ENABLE_JIT)
              export SONIC_ARM64_JIT=$(ENABLE_JIT)
              export SONIC_SIMD_ENABLED=$(ENABLE_SIMD)
              export SONIC_ARM64_NEON=$(ENABLE_SIMD)

              BUILD_TAGS="arm64,go1.20,!go1.26"
              if [ "$(ENABLE_JIT)" = "true" ]; then
                BUILD_TAGS="$BUILD_TAGS,arm64_jit,sonic_jit"
              fi
              if [ "$(ENABLE_SIMD)" = "true" ]; then
                BUILD_TAGS="$BUILD_TAGS,arm64_simd,arm64_neon"
              fi

              go build -v -tags "$BUILD_TAGS" -p $(PARALLELISM) -o build/arm64-darwin/sonic ./...
            displayName: 'Build Sonic for macOS'

          - publish: build/arm64-darwin
            artifact: sonic-arm64-darwin
            displayName: 'Publish macOS Artifacts'

      - job: Build_Windows
        displayName: 'Build ARM64 Windows'
        timeoutInMinutes: $(BUILD_TIMEOUT)
        pool:
          vmImage: 'windows-latest'
        steps:
          - checkout: self
            clean: true

          - task: GoTool@0
            displayName: 'Install Go'
            inputs:
              version: $(GO_VERSION)

          - script: |
              mkdir build\arm64-windows
          displayName: 'Create Build Directory'

          - script: |
              set GOOS=windows
              set GOARCH=arm64
              set GOMAXPROCS=$(PARALLELISM)
              set SONIC_JIT_ENABLED=$(ENABLE_JIT)
              set SONIC_ARM64_JIT=$(ENABLE_JIT)
              set SONIC_SIMD_ENABLED=$(ENABLE_SIMD)
              set SONIC_ARM64_NEON=$(ENABLE_SIMD)

              set BUILD_TAGS=arm64,go1.20,!go1.26
              if "$(ENABLE_JIT)"=="true" (
                  set BUILD_TAGS=%BUILD_TAGS%,arm64_jit,sonic_jit
              )
              if "$(ENABLE_SIMD)"=="true" (
                  set BUILD_TAGS=%BUILD_TAGS%,arm64_simd,arm64_neon
              )

              echo Building with tags: %BUILD_TAGS%

              go build -v -tags "%BUILD_TAGS%" -p $(PARALLELISM) -o build/arm64-windows/sonic.exe ./...
            displayName: 'Build Sonic for Windows'

          - publish: build/arm64-windows
            artifact: sonic-arm64-windows
            displayName: 'Publish Windows Artifacts'

  - stage: Test_ARM64
    displayName: 'Test ARM64 Build'
    dependsOn:
      - Build_ARM64_Linux
      - Build_ARM64_Other
    condition: succeeded()
    jobs:
      - job: Test_Linux
        displayName: 'Test on ARM64 Linux'
        timeoutInMinutes: $(TEST_TIMEOUT)
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          matrix:
            native_tests:
              ARCH: 'arm64'
              CROSS_COMPILE: 'false'
            cross_tests:
              ARCH: 'arm64'
              CROSS_COMPILE: 'true'
        steps:
          - checkout: self
            clean: true

          - download: current
            artifact: sonic-arm64-linux-$(ARCH)
            displayName: 'Download Build Artifacts'

          - task: GoTool@0
            displayName: 'Install Go'
            inputs:
              version: $(GO_VERSION)

          - script: |
              sudo apt-get update
              sudo apt-get install -y qemu-user-static binfmt-support gcc-aarch64-linux-gnu
            displayName: 'Install Cross-Compilation Tools'
            condition: eq(variables.CROSS_COMPILE, 'true')

          - script: |
              export GOOS=linux
              export GOARCH=$(ARCH)
              export GOMAXPROCS=$(PARALLELISM)
              export SONIC_JIT_ENABLED=$(ENABLE_JIT)
              export SONIC_ARM64_JIT=$(ENABLE_JIT)
              export SONIC_SIMD_ENABLED=$(ENABLE_SIMD)
              export SONIC_ARM64_NEON=$(ENABLE_SIMD)

              BUILD_TAGS="arm64,go1.20,!go1.26"
              if [ "$(ENABLE_JIT)" = "true" ]; then
                BUILD_TAGS="$BUILD_TAGS,arm64_jit,sonic_jit"
              fi
              if [ "$(ENABLE_SIMD)" = "true" ]; then
                BUILD_TAGS="$BUILD_TAGS,arm64_simd,arm64_neon"
              fi

              echo "Running tests with tags: $BUILD_TAGS"

              # Run unit tests
              go test -v -tags "$BUILD_TAGS" -timeout $(TEST_TIMEOUT)m -p $(PARALLELISM) -race -coverprofile=coverage.out -covermode=atomic ./...

              # Run ARM64 JIT specific tests
              go test -v -tags "$BUILD_TAGS" -timeout $(TEST_TIMEOUT)m -p $(PARALLELISM) ./internal/jit/arm64/...
            displayName: 'Run Tests'

          - script: |
              if [ "$(ENABLE_BENCH)" = "true" ]; then
                export GOOS=linux
                export GOARCH=$(ARCH)
                export GOMAXPROCS=$(PARALLELISM)
                export SONIC_JIT_ENABLED=$(ENABLE_JIT)
                export SONIC_ARM64_JIT=$(ENABLE_JIT)
                export SONIC_SIMD_ENABLED=$(ENABLE_SIMD)
                export SONIC_ARM64_NEON=$(ENABLE_SIMD)

                BUILD_TAGS="arm64,go1.20,!go1.26,arm64_jit,sonic_jit,arm64_simd,arm64_neon"

                echo "Running benchmarks with tags: $BUILD_TAGS"

                go test -bench=. -benchmem -tags "$BUILD_TAGS" -timeout 1h -count 3 -benchtime 10s -run=^$ ./internal/jit/arm64/... | tee benchmark.txt

                go test -bench=. -benchmem -tags "$BUILD_TAGS" -timeout 1h -count 3 -benchtime 10s -run=^$ ./internal/encoder/... | tee benchmark_encoder.txt

                go test -bench=. -benchmem -tags "$BUILD_TAGS" -timeout 1h -count 3 -benchtime 10s -run=^$ ./internal/decoder/... | tee benchmark_decoder.txt
              fi
            displayName: 'Run Benchmarks'
            condition: eq(variables.ENABLE_BENCH, 'true')

          - script: |
              go tool cover -html=coverage.out -o coverage.html
              echo "Coverage report generated: coverage.html"
              go tool cover -func=coverage.out | tail -1
            displayName: 'Generate Coverage Report'

          - publish: coverage.html
            artifact: coverage-report
            displayName: 'Publish Coverage Report'
            condition: always()

          - publish: benchmark.txt
            artifact: benchmark-results
            displayName: 'Publish Benchmark Results'
            condition: always()

  - stage: Integration_Tests
    displayName: 'Integration Tests'
    dependsOn: Test_ARM64
    condition: succeeded()
    jobs:
      - job: Integration_Tests
        displayName: 'Run Integration Tests'
        timeoutInMinutes: 45
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            clean: true

          - download: current
            artifact: sonic-arm64-linux-arm64
            displayName: 'Download Build Artifacts'

          - task: GoTool@0
            displayName: 'Install Go'
            inputs:
              version: $(GO_VERSION)

          - script: |
              sudo apt-get update
              sudo apt-get install -y qemu-user-static binfmt-support gcc-aarch64-linux-gnu
            displayName: 'Install Cross-Compilation Tools'

          - script: |
              export GOOS=linux
              export GOARCH=arm64
              export GOMAXPROCS=$(PARALLELISM)
              export SONIC_JIT_ENABLED=$(ENABLE_JIT)
              export SONIC_ARM64_JIT=$(ENABLE_JIT)
              export SONIC_SIMD_ENABLED=$(ENABLE_SIMD)
              export SONIC_ARM64_NEON=$(ENABLE_SIMD)

              BUILD_TAGS="arm64,go1.20,!go1.26,arm64_jit,sonic_jit,arm64_simd,arm64_neon"

              echo "Running integration tests with tags: $BUILD_TAGS"

              # Run integration tests
              go test -v -tags "$BUILD_TAGS" -timeout 30m -p $(PARALLELISM) ./internal/jit/arm64/... -run Integration

              # Run API compatibility tests
              go test -v -tags "$BUILD_TAGS" -timeout 30m ./... -run TestAPICompatibility
            displayName: 'Run Integration Tests'

          - script: |
              # Test with external libraries
              go test -v -tags "$BUILD_TAGS" -timeout 15m ./external_jsonlib_test/...
            displayName: 'Run External Library Tests'

          - script: |
              # Run performance regression tests
              export GOOS=linux
              export GOARCH=arm64
              export SONIC_JIT_ENABLED=1
              export SONIC_ARM64_JIT=1
              export SONIC_SIMD_ENABLED=1
              export SONIC_ARM64_NEON=1

              go test -v -tags "arm64,go1.20,!go1.26,arm64_jit,sonic_jit,arm64_simd,arm64_neon" -timeout 15m ./generic_test/... -run Benchmark
            displayName: 'Run Performance Regression Tests'

  - stage: Security_and_Quality
    displayName: 'Security and Quality Checks'
    dependsOn: Integration_Tests
    condition: succeeded()
    jobs:
      - job: Security_Scan
        displayName: 'Security Vulnerability Scan'
        timeoutInMinutes: 15
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            clean: true

          - task: GoTool@0
            displayName: 'Install Go'
            inputs:
              version: $(GO_VERSION)

          - script: |
              go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
              gosec -fmt sarif -out gosec.sarif ./...
            displayName: 'Run Security Scan'

          - publish: gosec.sarif
            artifact: security-scan
            displayName: 'Publish Security Scan Results'

      - job: Code_Quality
        displayName: 'Code Quality Analysis'
        timeoutInMinutes: 15
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            clean: true

          - task: GoTool@0
            displayName: 'Install Go'
            inputs:
              version: $(GO_VERSION)

          - script: |
              go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
              golangci-lint run --timeout=10m --out-format=github-actions ./...
            displayName: 'Run Code Quality Analysis'

          - script: |
              go install golang.org/x/vuln/cmd/govulncheck@latest
              govulncheck ./...
            displayName: 'Run Vulnerability Check'

          - script: |
              go vet ./...
              go fmt ./...
            displayName: 'Run Basic Quality Checks'

  - stage: Package_and_Release
    displayName: 'Package and Release'
    dependsOn:
      - Test_ARM64
      - Integration_Tests
      - Security_and_Quality
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/tags/v')))
    jobs:
      - job: Package
        displayName: 'Package Release Artifacts'
        timeoutInMinutes: 20
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            clean: true

          - download: current
            artifact: sonic-arm64-linux-arm64
            displayName: 'Download Linux Artifacts'
          - download: current
            artifact: sonic-arm64-darwin
            displayName: 'Download macOS Artifacts'
          - download: current
            artifact: sonic-arm64-windows
            displayName: 'Download Windows Artifacts'

          - script: |
              # Create release directory
              mkdir -p release/sonic-arm64-jit

              # Copy artifacts
              cp -r sonic-arm64-linux-arm64/* release/sonic-arm64-jit/
              cp -r sonic-arm64-darwin/* release/sonic-arm64-jit/
              cp -r sonic-arm64-windows/* release/sonic-arm64-jit/

              # Create version info
              cat > release/sonic-arm64-jit/VERSION.txt << EOF
              Sonic ARM64 JIT Library
              Version: v1.0.0-arm64-jit
              Go Version: $(GO_VERSION)
              Build Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)
              Git Commit: $(Build.SourceVersion)
              Features: JIT, SIMD, NEON
              EOF

              # Create README
              cat > release/sonic-arm64-jit/README.md << 'EOF'
              # Sonic ARM64 JIT Library

              This is the ARM64 JIT-enabled build of the Sonic JSON library.

              ## Features
              - ARM64 Just-In-Time (JIT) compilation
              - ARM64 SIMD/NEON optimizations
              - High-performance JSON encoding/decoding
              - Full API compatibility with standard Sonic

              ## Usage
              ```go
              import "github.com/bytedance/sonic"

              // Use as regular sonic library
              data, err := sonic.Marshal(yourData)
              var result YourType
              err = sonic.Unmarshal(data, &result)
              ```

              ## Requirements
              - ARM64 architecture
              - Go 1.20-1.25
              - Linux/macOS/Windows

              ## Performance
              The ARM64 JIT implementation provides significant performance improvements:
              - 2-5x faster encoding/decoding
              - Reduced memory allocation
              - Optimized for ARM64 pipeline
              EOF

              # Create checksums
              cd release/sonic-arm64-jit
              find . -type f -exec sha256sum {} + > ../sonic-arm64-jit.sha256
              cd ../..

              # Create archive
              tar -czf release/sonic-arm64-jit.tar.gz -C release sonic-arm64-jit
              zip -r release/sonic-arm64-jit.zip release/sonic-arm64-jit
            displayName: 'Create Release Package'

          - publish: release/sonic-arm64-jit.tar.gz
            artifact: sonic-arm64-jit-tarball
            displayName: 'Publish Release Tarball'

          - publish: release/sonic-arm64-jit.zip
            artifact: sonic-arm64-jit-zip
            displayName: 'Publish Release Zip'

          - publish: release/sonic-arm64-jit.sha256
            artifact: checksums
            displayName: 'Publish Checksums'

  - stage: Deploy
    displayName: 'Deploy to Production'
    dependsOn: Package_and_Release
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    jobs:
      - deployment: Deploy_Release
        displayName: 'Deploy Release'
        timeoutInMinutes: 30
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  clean: true

                - download: current
                  artifact: sonic-arm64-jit-tarball
                  displayName: 'Download Release Package'

                - script: |
                    echo "Deploying ARM64 JIT release to production..."
                    echo "Release: $(Build.SourceBranch)"
                    echo "Commit: $(Build.SourceVersion)"

                    # Here you would add actual deployment logic
                    # For example: upload to package repositories, docker images, etc.

                    echo "Deployment completed successfully!"
                  displayName: 'Deploy Release'

# Optional: Add notifications, approval gates, etc.